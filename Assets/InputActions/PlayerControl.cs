//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/InputActions/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""Two Players"",
            ""id"": ""950557ed-c41f-4fcb-b2b2-8ba80e8c76fe"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""36718686-1187-41fb-8934-b204f98f36f8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""d94daa44-fec5-4116-b554-7d3ca4da3762"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""322f0635-e48d-4638-b082-6bd3f6a001ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCameraLeft"",
                    ""type"": ""Button"",
                    ""id"": ""74088f1d-09dd-4999-bc59-1593c0ecaf47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCameraRight"",
                    ""type"": ""Button"",
                    ""id"": ""d83ad2e7-3fc1-4eba-a68e-cf11cb177de5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""321b3598-5e16-49b8-a92c-2057a3eadf79"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""50b1ceaa-beca-45e3-b923-ebae09d02ab9"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""78928b1b-50f9-4d49-98f5-e73feecf1082"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c4297d25-5e4b-4c22-95a6-3e98d60e099c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""80e11c9e-c74d-47ed-af79-bb0a2e10513b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""caac9a4c-9c80-4104-b240-4419b65206bf"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""7ebbc831-4d71-473e-b75a-b4f0a86e9dfa"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4339c21c-b868-42a4-9dfa-cba4470e0951"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b0a2d52-871c-4a98-9e3b-d6d0168d42fe"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d6600df0-2ccb-4ec3-a5cd-c7dd49859387"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""993d9b31-c73e-4c65-9591-91bd8d639a0b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RotateCameraLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e854a869-ce90-4b8b-aa96-fd4461d311d3"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RotateCameraLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3fc6d78b-11ab-4261-9d0c-bdeb45b71556"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RotateCameraRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d41f5d8f-3c1c-4f37-a118-faef85c7361a"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RotateCameraRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""One Player"",
            ""id"": ""5e28e73a-533a-4bff-b8a8-738c751968fc"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""aee3499b-7b00-49e8-879b-f3881365540c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""afd90ec9-e510-42d7-94e6-14f46ee74b6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""7705da60-98f2-43ce-bf29-f0df531e4f0d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCameraLeft"",
                    ""type"": ""Button"",
                    ""id"": ""c23fa004-6c42-4bd2-b1f9-6084893fcfac"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCameraRight"",
                    ""type"": ""Button"",
                    ""id"": ""6a84f553-e2b6-4983-a3a8-6c056cb74590"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Change Character"",
                    ""type"": ""Button"",
                    ""id"": ""eafbdd4c-1294-454d-bd81-6be0faa5a1ab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d57028a6-ad00-470c-8f99-13064ea38fac"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f7ba2002-ac22-4a08-b30a-2aeca3e3bf5d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""0223e496-295d-4f1a-8062-bd8c1a581e2a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cb3392f4-55bd-4cee-bbeb-9b8e577848c0"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c5f631ae-1432-4eff-bd32-275adbc246dd"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d2a094c8-8593-4f72-a965-a98e17147488"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""85336fff-a9fa-4149-813f-a170a8b1728f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""591b5090-7464-4f61-9630-2bd23bf86d9d"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16a2688f-abb3-4a64-a38b-dc0c984f1a66"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b79e9342-8c44-4834-8df3-2db698a03851"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5857b957-562b-4702-8d16-5019bf1e800b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RotateCameraLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f698d0d5-e25c-4133-9b0e-271e8ffae9eb"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RotateCameraLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""acb8c6f8-eac9-4f95-97b8-50f5bd3f16f0"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""RotateCameraRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""66df79c1-79c1-436b-a0c2-cd90cf8d1343"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""RotateCameraRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56b7cc9e-99ef-4344-83cd-d07fc242e34a"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Change Character"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9209c1b-0b7e-4c0b-bb02-50e12303900a"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Change Character"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Two Players
        m_TwoPlayers = asset.FindActionMap("Two Players", throwIfNotFound: true);
        m_TwoPlayers_Movement = m_TwoPlayers.FindAction("Movement", throwIfNotFound: true);
        m_TwoPlayers_Jump = m_TwoPlayers.FindAction("Jump", throwIfNotFound: true);
        m_TwoPlayers_Action = m_TwoPlayers.FindAction("Action", throwIfNotFound: true);
        m_TwoPlayers_RotateCameraLeft = m_TwoPlayers.FindAction("RotateCameraLeft", throwIfNotFound: true);
        m_TwoPlayers_RotateCameraRight = m_TwoPlayers.FindAction("RotateCameraRight", throwIfNotFound: true);
        // One Player
        m_OnePlayer = asset.FindActionMap("One Player", throwIfNotFound: true);
        m_OnePlayer_Movement = m_OnePlayer.FindAction("Movement", throwIfNotFound: true);
        m_OnePlayer_Jump = m_OnePlayer.FindAction("Jump", throwIfNotFound: true);
        m_OnePlayer_Action = m_OnePlayer.FindAction("Action", throwIfNotFound: true);
        m_OnePlayer_RotateCameraLeft = m_OnePlayer.FindAction("RotateCameraLeft", throwIfNotFound: true);
        m_OnePlayer_RotateCameraRight = m_OnePlayer.FindAction("RotateCameraRight", throwIfNotFound: true);
        m_OnePlayer_ChangeCharacter = m_OnePlayer.FindAction("Change Character", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Two Players
    private readonly InputActionMap m_TwoPlayers;
    private ITwoPlayersActions m_TwoPlayersActionsCallbackInterface;
    private readonly InputAction m_TwoPlayers_Movement;
    private readonly InputAction m_TwoPlayers_Jump;
    private readonly InputAction m_TwoPlayers_Action;
    private readonly InputAction m_TwoPlayers_RotateCameraLeft;
    private readonly InputAction m_TwoPlayers_RotateCameraRight;
    public struct TwoPlayersActions
    {
        private @PlayerControl m_Wrapper;
        public TwoPlayersActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_TwoPlayers_Movement;
        public InputAction @Jump => m_Wrapper.m_TwoPlayers_Jump;
        public InputAction @Action => m_Wrapper.m_TwoPlayers_Action;
        public InputAction @RotateCameraLeft => m_Wrapper.m_TwoPlayers_RotateCameraLeft;
        public InputAction @RotateCameraRight => m_Wrapper.m_TwoPlayers_RotateCameraRight;
        public InputActionMap Get() { return m_Wrapper.m_TwoPlayers; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TwoPlayersActions set) { return set.Get(); }
        public void SetCallbacks(ITwoPlayersActions instance)
        {
            if (m_Wrapper.m_TwoPlayersActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnJump;
                @Action.started -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnAction;
                @Action.performed -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnAction;
                @Action.canceled -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnAction;
                @RotateCameraLeft.started -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnRotateCameraLeft;
                @RotateCameraLeft.performed -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnRotateCameraLeft;
                @RotateCameraLeft.canceled -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnRotateCameraLeft;
                @RotateCameraRight.started -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnRotateCameraRight;
                @RotateCameraRight.performed -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnRotateCameraRight;
                @RotateCameraRight.canceled -= m_Wrapper.m_TwoPlayersActionsCallbackInterface.OnRotateCameraRight;
            }
            m_Wrapper.m_TwoPlayersActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
                @RotateCameraLeft.started += instance.OnRotateCameraLeft;
                @RotateCameraLeft.performed += instance.OnRotateCameraLeft;
                @RotateCameraLeft.canceled += instance.OnRotateCameraLeft;
                @RotateCameraRight.started += instance.OnRotateCameraRight;
                @RotateCameraRight.performed += instance.OnRotateCameraRight;
                @RotateCameraRight.canceled += instance.OnRotateCameraRight;
            }
        }
    }
    public TwoPlayersActions @TwoPlayers => new TwoPlayersActions(this);

    // One Player
    private readonly InputActionMap m_OnePlayer;
    private IOnePlayerActions m_OnePlayerActionsCallbackInterface;
    private readonly InputAction m_OnePlayer_Movement;
    private readonly InputAction m_OnePlayer_Jump;
    private readonly InputAction m_OnePlayer_Action;
    private readonly InputAction m_OnePlayer_RotateCameraLeft;
    private readonly InputAction m_OnePlayer_RotateCameraRight;
    private readonly InputAction m_OnePlayer_ChangeCharacter;
    public struct OnePlayerActions
    {
        private @PlayerControl m_Wrapper;
        public OnePlayerActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_OnePlayer_Movement;
        public InputAction @Jump => m_Wrapper.m_OnePlayer_Jump;
        public InputAction @Action => m_Wrapper.m_OnePlayer_Action;
        public InputAction @RotateCameraLeft => m_Wrapper.m_OnePlayer_RotateCameraLeft;
        public InputAction @RotateCameraRight => m_Wrapper.m_OnePlayer_RotateCameraRight;
        public InputAction @ChangeCharacter => m_Wrapper.m_OnePlayer_ChangeCharacter;
        public InputActionMap Get() { return m_Wrapper.m_OnePlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnePlayerActions set) { return set.Get(); }
        public void SetCallbacks(IOnePlayerActions instance)
        {
            if (m_Wrapper.m_OnePlayerActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnJump;
                @Action.started -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnAction;
                @Action.performed -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnAction;
                @Action.canceled -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnAction;
                @RotateCameraLeft.started -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnRotateCameraLeft;
                @RotateCameraLeft.performed -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnRotateCameraLeft;
                @RotateCameraLeft.canceled -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnRotateCameraLeft;
                @RotateCameraRight.started -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnRotateCameraRight;
                @RotateCameraRight.performed -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnRotateCameraRight;
                @RotateCameraRight.canceled -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnRotateCameraRight;
                @ChangeCharacter.started -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnChangeCharacter;
                @ChangeCharacter.performed -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnChangeCharacter;
                @ChangeCharacter.canceled -= m_Wrapper.m_OnePlayerActionsCallbackInterface.OnChangeCharacter;
            }
            m_Wrapper.m_OnePlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Action.started += instance.OnAction;
                @Action.performed += instance.OnAction;
                @Action.canceled += instance.OnAction;
                @RotateCameraLeft.started += instance.OnRotateCameraLeft;
                @RotateCameraLeft.performed += instance.OnRotateCameraLeft;
                @RotateCameraLeft.canceled += instance.OnRotateCameraLeft;
                @RotateCameraRight.started += instance.OnRotateCameraRight;
                @RotateCameraRight.performed += instance.OnRotateCameraRight;
                @RotateCameraRight.canceled += instance.OnRotateCameraRight;
                @ChangeCharacter.started += instance.OnChangeCharacter;
                @ChangeCharacter.performed += instance.OnChangeCharacter;
                @ChangeCharacter.canceled += instance.OnChangeCharacter;
            }
        }
    }
    public OnePlayerActions @OnePlayer => new OnePlayerActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface ITwoPlayersActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnRotateCameraLeft(InputAction.CallbackContext context);
        void OnRotateCameraRight(InputAction.CallbackContext context);
    }
    public interface IOnePlayerActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnRotateCameraLeft(InputAction.CallbackContext context);
        void OnRotateCameraRight(InputAction.CallbackContext context);
        void OnChangeCharacter(InputAction.CallbackContext context);
    }
}
